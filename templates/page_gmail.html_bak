<script src="/js/base64.js"></script>
<main class="col-sm-10 ml-sm-auto col-md-12 pt-3 pl-3" role="main">

    <h1>Gmail</h1>
    <p>Gmail API Quickstart</p>
    
        <!--Add buttons to initiate auth sequence and sign out-->
        <button id="authorize-button" style="display: none;">Authorize</button>
        <button id="signout-button" style="display: none;">Sign Out</button>
        <button id="send-button" style="display: none;">send mail</button>
        
        <pre id="content"></pre>
    
        <script type="text/javascript">
        var send_para = {
                userId : 'userId',
                email : 'email',
                callback : 'callback'
            }
          // Client ID and API key from the Developer Console
          var CLIENT_ID = '662368221041-dbsr2r6oa4roisqh7qbuqc7sf93e11q4.apps.googleusercontent.com';
          
    
          // Array of API discovery doc URLs for APIs used by the quickstart
          var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest"];
    
          // Authorization scopes required by the API; multiple scopes can be
          // included, separated by spaces.
          //var SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';
          var SCOPES = "https://mail.google.com/ " +
                        "https://www.googleapis.com/auth/gmail.modify " + 
                        "https://www.googleapis.com/auth/gmail.compose " +
                        "https://www.googleapis.com/auth/gmail.send ";
                        
    
          var authorizeButton = document.getElementById('authorize-button');
          var signoutButton = document.getElementById('signout-button');
          var sendButton = document.getElementById('send-button');
    
          /**
           *  On load, called to load the auth2 library and API client library.
           */
          function handleClientLoad() {
            gapi.load('client:auth2', initClient);
          }
    
          /**
           *  Initializes the API client library and sets up sign-in state
           *  listeners.
           */
          function initClient() {
            gapi.client.init({
              discoveryDocs: DISCOVERY_DOCS,
              clientId: CLIENT_ID,
              scope: SCOPES
            }).then(function () {
              // Listen for sign-in state changes.
              gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
    
              // Handle the initial sign-in state.
              updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
              authorizeButton.onclick = handleAuthClick;
              signoutButton.onclick = handleSignoutClick;
              send_para.userId = "me"
             
              send_para.email =  window.btoa(
                "Content-Type: text/plain; charset=\"UTF-8\"n" +
                "MIME-Version: 1.0n" +
                "Content-Transfer-Encoding: 7bitn" +
                "To: sayyes566@gmail.comn" +
                //"from: sender@gmail.comn" +
                "subject: Subject Textnn" +
                "The actual message text goes here"
                ).replace(/\+/g, '-').replace(/\//g, '_');
              
              send_para.callback = ""
              sendButton.onclick = sendMessage
            });
          }
    
          /**
           *  Called when the signed in status changes, to update the UI
           *  appropriately. After a sign-in, the API is called.
           */
          function updateSigninStatus(isSignedIn) {
            if (isSignedIn) {
              authorizeButton.style.display = 'none';
              signoutButton.style.display = 'block';
              sendButton.style.display = 'block';
              listLabels();
            } else {
              authorizeButton.style.display = 'block';
              signoutButton.style.display = 'none';
              sendButton.style.display = 'none';
            }
          }
    
          /**
           *  Sign in the user upon button click.
           */
          function handleAuthClick(event) {
            gapi.auth2.getAuthInstance().signIn();
          }
    
          /**
           *  Sign out the user upon button click.
           */
          function handleSignoutClick(event) {
            gapi.auth2.getAuthInstance().signOut();
          }
    
          /**
           * Append a pre element to the body containing the given message
           * as its text node. Used to display the results of the API call.
           *
           * @param {string} message Text to be placed in pre element.
           */
          function appendPre(message) {
            var pre = document.getElementById('content');
            var textContent = document.createTextNode(message + '\n');
            pre.appendChild(textContent);
          }
    
          /**
           * Print all Labels in the authorized user's inbox. If no labels
           * are found an appropriate message is printed.
           */
          function listLabels() {
            gapi.client.gmail.users.labels.list({
              'userId': 'me'
            }).then(function(response) {
              var labels = response.result.labels;
              appendPre('Labels:');
    
              if (labels && labels.length > 0) {
                for (i = 0; i < labels.length; i++) {
                  var label = labels[i];
                  appendPre(label.name)
                }
              } else {
                appendPre('No Labels found.');
              }
            });
          }


function b64EncodeUnicode(str) {
    // first we use encodeURIComponent to get percent-encoded UTF-8,
    // then we convert the percent encodings into raw bytes which
    // can be fed into btoa.
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
    function toSolidBytes(match, p1) {
    return String.fromCharCode('0x' + p1);
}));
}
/**
 * Send Message.
 *
 * @param  {String} userId User's email address. The special value 'me'
 * can be used to indicate the authenticated user.
 * @param  {String} email RFC 5322 formatted String.
 * @param  {Function} callback Function to call when the request is complete.
 */

 function sendMessage(headers_obj, message, callback)
      {
        var email = '';
        for(var header in headers_obj)
          email += header += ": "+headers_obj[header]+"\r\n";
        email += "\r\n" + message;
        var sendRequest = gapi.client.gmail.users.messages.send({
          'userId': 'me',
          'resource': {
            'raw': window.btoa(email).replace(/\+/g, '-').replace(/\//g, '_')
          }
        });
        return sendRequest.execute(callback);
      }
function sendMessage() {
    //SCOPES = 'https://www.googleapis.com/auth/gmail.send';
    let userId =  send_para.userId
    let email = send_para.email
    let callback = result_get
    // Using the js-base64 library for encoding:
    // https://www.npmjs.com/package/js-base64
    var base64EncodedEmail = Base64.encodeURI(email);
    console.log(email)
    console.log(base64EncodedEmail)
    //var base64EncodedEmail = b64EncodeUnicode(email);
   
   
   

    var request = gapi.client.gmail.users.messages.send({
        'userId': userId,
        'resource': {
        'raw': email //base64EncodedEmail
        }
    });
    request.execute(callback);
}
function result_get(){
    console.log("success_mailing")
    return "success"
}
setTimeout(function(){
   // sendMessage("me", "sayyes566@gmail.com")
},2000)
    
        </script>
    
        <script async defer src="https://apis.google.com/js/api.js"
          onload="this.onload=function(){};handleClientLoad()"
          onreadystatechange="if (this.readyState === 'complete') this.onload()">
        </script>
</main>